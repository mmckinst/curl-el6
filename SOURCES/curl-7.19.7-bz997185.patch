From 98b6aa7c6a6647555bf26f592b574c3130abab96 Mon Sep 17 00:00:00 2001
From: Daniel Stenberg <daniel@haxx.se>
Date: Sat, 18 Dec 2010 17:12:44 +0100
Subject: [PATCH] examples: socket type cleanup

Upstream-commit: bcfb9ea34cc7cddbbf74376aa16043681e4745a7
Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 docs/examples/evhiperfifo.c |  2 +-
 docs/examples/hiperfifo.c   |  2 +-
 docs/examples/sendrecv.c    | 15 ++++++++++-----
 3 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/docs/examples/evhiperfifo.c b/docs/examples/evhiperfifo.c
index be63be5..9500a68 100644
--- a/docs/examples/evhiperfifo.c
+++ b/docs/examples/evhiperfifo.c
@@ -397,7 +397,7 @@ static int init_fifo (GlobalInfo *g)
 {
   struct stat st;
   static const char *fifo = "hiper.fifo";
-  int sockfd;
+  curl_socket_t sockfd;
 
   fprintf(MSG_OUT, "Creating named pipe \"%s\"\n", fifo);
   if ( lstat (fifo, &st) == 0 )
diff --git a/docs/examples/hiperfifo.c b/docs/examples/hiperfifo.c
index 2cb7e35..025861b 100644
--- a/docs/examples/hiperfifo.c
+++ b/docs/examples/hiperfifo.c
@@ -373,7 +373,7 @@ static int init_fifo (GlobalInfo *g)
 {
   struct stat st;
   static const char *fifo = "hiper.fifo";
-  int sockfd;
+  curl_socket_t sockfd;
 
   fprintf(MSG_OUT, "Creating named pipe \"%s\"\n", fifo);
   if (lstat (fifo, &st) == 0) {
diff --git a/docs/examples/sendrecv.c b/docs/examples/sendrecv.c
index 0f7d12e..6558dfd 100644
--- a/docs/examples/sendrecv.c
+++ b/docs/examples/sendrecv.c
@@ -15,7 +15,7 @@
 #include <curl/curl.h>
 
 /* Auxiliary function that waits on the socket. */
-static int wait_on_socket(int sockfd, int for_recv, long timeout_ms)
+static int wait_on_socket(curl_socket_t sockfd, int for_recv, long timeout_ms)
 {
   struct timeval tv;
   fd_set infd, outfd, errfd;
@@ -50,7 +50,8 @@ int main(void)
   CURLcode res;
   /* Minimalistic http request */
   const char *request = "GET / HTTP/1.0\r\nHost: curl.haxx.se\r\n\r\n";
-  int sockfd; /* socket */
+  curl_socket_t sockfd; /* socket */
+  long sockextr;
   size_t iolen;
 
   curl = curl_easy_init();
@@ -66,9 +67,11 @@ int main(void)
       return 1;
     }
 
-    /* Extract the socket from the curl handle - we'll need it
-     * for waiting */
-    res = curl_easy_getinfo(curl, CURLINFO_LASTSOCKET, &sockfd);
+    /* Extract the socket from the curl handle - we'll need it for waiting.
+     * Note that this API takes a pointer to a 'long' while we use
+     * curl_socket_t for sockets otherwise.
+     */
+    res = curl_easy_getinfo(curl, CURLINFO_LASTSOCKET, &sockextr);
 
     if(CURLE_OK != res)
     {
@@ -76,6 +79,8 @@ int main(void)
       return 1;
     }
 
+    sockfd = sockextr;
+
     /* wait for the socket to become ready for sending */
     if(!wait_on_socket(sockfd, 0, 60000L))
     {
-- 
2.1.0

